import os.path

Import('*')

# Add the install path so that gcc and newlib can find the tools that we are building
host_env = env_base.Clone()
host_env.AppendENVPath('PATH', Dir('install/bin').abspath)
# Set -jn in the environment instead of on the make command line so if it changes,
# scons won't try to rebuild everything (each target depends on the command used
# to build it).
host_env['ENV']['MAKEFLAGS'] = '-j%d' % GetOption('num_jobs')


target = 'arm-eabi'


# ARM build environment
arm = host_env.Clone()
arm.Replace(CC='clang')
arm.Replace(CXX='clang++')


sysroot_dir = Dir('root')

# Build packages
def BuildSubmodule(dir, config_options):
	submodule_dir = Dir('#/firmware/%s' % dir)
	build_dir = Dir('%s' % dir)
	# mkdir_build_dir = host_env.Command(build_dir, submodule_dir, 'mkdir -p ${TARGET}')
	# Clean(mkdir_build_dir, build_dir)
	
	# Configure in the source dir
	# if the config completes successfully, it will create a Makefile
	configure = host_env.Command('%s/Makefile' % build_dir, submodule_dir,
		'cd ${TARGET.dir} && CC=clang ${SOURCE.abspath}/configure --prefix=%s %s' % (Dir('install').abspath, config_options))
	# Depends(configure, mkdir_build_dir)
	# Clean(configure, '%/*' % build_dir)	#FIXME: uncomment, use Glob

	# Build the package
	build_stamp = build_dir.File('.built')
	build = host_env.Command(build_stamp, '', 'cd ${TARGET.dir} && CC=clang make && make install && touch ${TARGET.file}')
	Clean(build, build_dir)
	Depends(build, configure)
	
	return build


arm_binutils = BuildSubmodule('external/binutils',
	'--target=%s --enable-interwork --enable-multilib --disable-werror' % target)

# arm_gcc = BuildSubmodule('external/gcc',
# 	'--target=%s --with-newlib --enable-languages="c" --disable-threads '
# 	'--disable-shared --with-headers=%s/source/newlib/libc/include'
# 	'--enable-interwork --enable-multilib --with-system-zlib --with-mode=thumb --with-arch=armv4t' %
# 	(target, Dir('.').abspath))

# (unpack_gcc, config_gcc, build_gcc) = BuildPackage(gcc_dir, gcc_file, gcc_size, gcc_url,
# 	'--target=%s --with-newlib --enable-languages="c" --disable-threads '
# 	'--disable-shared --with-headers=%s/source/%s/newlib/libc/include '
# 	'--enable-interwork --enable-multilib --with-system-zlib --with-mode=thumb --with-arch=armv4t' %
# 	(target, Dir('.').abspath, newlib_package))

# target triple
arch = 'arm'
sub = 'v4t'
vendor = 'atmel'
sys = 'none'
abi = 'eabi'
targetFlags = '%s%s-%s-%s-%s' % (arch, sub, vendor, sys, abi)

#FIXME: Relative
sharedFlags = '--target %s --sysroot /home/justbuchanan/src/rj/robocup/software/build/firmware/root' % targetFlags

arm.Append(CPPFLAGS=sharedFlags)
arm.Append(CFLAGS=sharedFlags)

arm_newlib = BuildSubmodule('external/newlib',
	'--target %s --enable-interwork --enable-multilib --enable-newlib-hw-fp' % targetFlags)


# Aliases to allow specific parts of the toolchain to be rebuilt/cleaned
Alias('arm-binutils', arm_binutils)
Alias('arm-newlib', arm_newlib)
Alias('arm-toolchain', ['arm-binutils'])

# Help('  arm-toolchain: ARM %s, %s, and %s\n' % (binutils_package, gcc_package, newlib_package))

# To remove the installed files, you must clean all of the toolchain.
# The packages do not provide any way to uninstall files.
Clean('arm-toolchain', Dir('install'))


arm.Append(BUILDERS={'Binary': Builder(
	action='arm-elf-objcopy -O binary $SOURCE $TARGET',
	suffix='.bin',
	src_suffix='.elf')})

# Add a dependency on the complete toolchain to every object
def ArmEmitter(target, source, env):
	for s in source:
		env.Depends(s, 'arm-toolchain')
	return (target, source)
if not GetOption('clean'):
	# Doing this all the time causes the toolchain to be cleaned whenever a target built with it is cleaned.
	#
	# We are subverting scons' automatic cleaning: build the toolchain when building targets that need it,
	# but only clean it if explicitly instructed to do so on the command line.
	arm.AppendUnique(PROGEMITTER=ArmEmitter)
	arm.AppendUnique(LIBEMITTER=ArmEmitter)

Export('arm')
