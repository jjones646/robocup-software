import os.path

Import('*')

# Add the install path so that gcc and newlib can find the tools that we are building
host_env = env_base.Clone()
host_env.AppendENVPath('PATH', Dir('install/bin').abspath)
# Set -jn in the environment instead of on the make command line so if it changes,
# scons won't try to rebuild everything (each target depends on the command used
# to build it).
host_env['ENV']['MAKEFLAGS'] = '-j%d' % GetOption('num_jobs')

# mirror_gnu = 'http://www.gtlib.gatech.edu/pub/gnu/gnu'
# mirror_newlib = 'ftp://sources.redhat.com/pub/newlib'

# Package versions and size of complete file
# Use gcc-core to avoid downloading huge things when we're not using C++
# binutils_package = 'binutils-2.21'
# binutils_size = 18742991
# gcc_version = '4.5.2'
# gcc_package = 'gcc-' + gcc_version
# gcc_size = 28241468

# newlib_package = 'newlib-2.0.0'
# newlib_size = 15868470

# downloads_dir = Dir('#/downloads')

# binutils_file = '%s.tar.bz2' % binutils_package
# binutils_url = '%s/binutils/%s' % (mirror_gnu, binutils_file)

# gcc_file = 'gcc-core-%s.tar.bz2' % gcc_version
# gcc_dir = 'gcc-' + gcc_version
# gcc_url = '%s/gcc/%s/%s' % (mirror_gnu, gcc_dir, gcc_file)

# newlib_file = '%s.tar.gz' % newlib_package
# newlib_url = '%s/%s' % (mirror_newlib, newlib_file)

target = 'arm-elf'

# Build packages
def BuildPackage(dir, config_options):

	# if os.path.isfile(dl_target.abspath) and os.path.getsize(dl_target.abspath) == size:
		# File is already present and complete
	# dl_file = dl_target
	# else:
		# Need to download file
		# dl_file = host_env.Command(dl_target, '', 'curl %s -o ${TARGET}' % url)

	source_dir = Dir('external/%s' % dir)
	build_dir = Dir('build/%s' % dir)

	# These files will be created after complicated steps are completed successfully
	config_stamp = build_dir.File('.configured')
	build_stamp = build_dir.File('.built')
	
	# Unpack the source
	# unpack = host_env.Command(source_dir.File('.unpacked'), dl_file,
		# 'tar -C %s -xf ${SOURCE} && touch ${TARGET}' % Dir('source').abspath)
	# Depends(unpack, dl_file)
	# Clean(unpack, source_dir)
	
	# Configure in a build directory
	configure = host_env.Command(config_stamp, source_dir,
		'cd ${TARGET.dir} && ${SOURCE.abspath}/configure --prefix=%s %s && touch ${TARGET.file}' % (Dir('install').abspath, config_options))
	
	# Build the package
	build = host_env.Command(build_stamp, config_stamp, 'cd ${TARGET.dir} && make && make install && touch ${TARGET.file}')
	Clean(build, build_dir)
	Depends(build, configure)
	
	return build



arm_binutils = BuildPackage('external/binutils',
	'--target=%s --enable-interwork --enable-multilib --disable-werror' % target)

arm_gcc = BuildPackage('external/gcc',
	'--target=%s --with-newlib --enable-languages="c" --disable-threads '
	'--disable-shared --with-headers=%s/source/%s/newlib/libc/include'
	'--enable-interwork --enable-multilib --with-system-zlib --with-mode=thumb --with-arch=armv4t' %
	(target, Dir('.').abspath, newlib_package))

arm_newlib = BuildPackage('external/newlib',
	'--target=%s --enable-interwork --enable-multilib --enable-newlib-hw-fp' % target)


# Aliases to allow specific parts of the toolchain to be rebuilt/cleaned
Alias('arm-toolchain', ['arm_binutils', 'arm_gcc', 'arm_newlib'])

# Help('  arm-toolchain: ARM %s, %s, and %s\n' % (binutils_package, gcc_package, newlib_package))

# To remove the installed files, you must clean all of the toolchain.
# The packages do not provide any way to uninstall files.
Clean('arm-toolchain', Dir('install'))

# ARM build environment
arm = host_env.Clone()
arm.Replace(CC='arm-elf-gcc')

arm.Append(BUILDERS={'Binary': Builder(
	action='arm-elf-objcopy -O binary $SOURCE $TARGET',
	suffix='.bin',
	src_suffix='.elf')})

# Add a dependency on the complete toolchain to every object
def ArmEmitter(target, source, env):
	for s in source:
		env.Depends(s, 'arm-toolchain')
	return (target, source)
if not GetOption('clean'):
	# Doing this all the time causes the toolchain to be cleaned whenever a target built with it is cleaned.
	#
	# We are subverting scons' automatic cleaning: build the toolchain when building targets that need it,
	# but only clean it if explicitly instructed to do so on the command line.
	arm.AppendUnique(PROGEMITTER=ArmEmitter)
	arm.AppendUnique(LIBEMITTER=ArmEmitter)

Export('arm')
