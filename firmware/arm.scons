import os.path

Import('*')

# Add the install path so that gcc and newlib can find the tools that we are building
host_env = env_base.Clone()
host_env.AppendENVPath('PATH', Dir('install/bin').abspath)
# Set -jn in the environment instead of on the make command line so if it changes,
# scons won't try to rebuild everything (each target depends on the command used
# to build it).
host_env['ENV']['MAKEFLAGS'] = '-j%d' % GetOption('num_jobs')


target = 'arm-elf'

# Build packages
def BuildPackage(dir, config_options, make_cmd):
	source_dir = Dir('#/firmware/external/%s' % dir)
	build_dir = Dir('build/%s' % dir)

	# These files will be created after complicated steps are completed successfully
	config_stamp = build_dir.File('.configured')
	build_stamp = build_dir.File('.built')

	# Configure in a build directory
	configure = host_env.Command(config_stamp, source_dir,
		'cd ${TARGET.dir} && ${SOURCE.abspath}/configure --prefix=%s %s && touch ${TARGET.file}' % (Dir('install').abspath, config_options))
	
	# Build the package
	build = host_env.Command(build_stamp, config_stamp, 'cd ${TARGET.dir} && %s && touch ${TARGET.file}' % make_cmd)
	Clean(build, build_dir)
	
	return (configure, build)

(config_binutils, build_binutils) = BuildPackage('binutils',
	'--target=%s --enable-interwork --enable-multilib --disable-werror' % target, 'make && make install')

(config_gcc, build_gcc_compiler) = BuildPackage('gcc',
	'--target=%s --with-newlib --enable-languages="c" --disable-threads '
	'--disable-shared --with-headers=%s '
	'--enable-interwork --enable-multilib --with-system-zlib --with-mode=thumb --with-arch=armv4t' %
	(target, Dir('#/firmware/external/newlib/newlib/libc/include/').abspath), 'make all-gcc install-gcc')

(config_newlib, build_newlib) = BuildPackage('newlib',
	'--target=%s '
	'--enable-interwork '
	# '--with-float=soft '
	# '--enable-soft-float '
	'--enable-newlib-hw-fp '
	'--enable-multilib' % target, 'make && make install')


gcc_all_build_stamp = Dir('build/gcc').File('.built-all')
build_gcc_all = host_env.Command(gcc_all_build_stamp, '', 'cd ${TARGET.dir} && make && make install && touch ${TARGET.file}')

Depends(build_gcc_all, build_gcc_compiler)




# Dependencies
Depends(config_gcc, build_binutils)
Depends(config_newlib, build_gcc_compiler)
# Depends(config_gcc, config_newlib)

# Aliases to allow specific parts of the toolchain to be rebuilt/cleaned
Alias('arm-binutils', (config_binutils, build_binutils))
Alias('arm-gcc', (config_gcc, build_gcc_all))
Alias('arm-newlib', (config_newlib, build_newlib))
Alias('arm-toolchain', ['arm-binutils', 'arm-gcc', 'arm-newlib'])

Help('  arm-toolchain: ARM %s, %s, and %s\n' % ('binutils', 'gcc', 'newlib'))

# To remove the installed files, you must clean all of the toolchain.
# The packages do not provide any way to uninstall files.
Clean('arm-toolchain', Dir('install'))

# ARM build environment
arm = host_env.Clone()
arm.Replace(CC='arm-elf-gcc')

arm.Append(BUILDERS={'Binary': Builder(
	action='arm-elf-objcopy -O binary $SOURCE $TARGET',
	suffix='.bin',
	src_suffix='.elf')})

# Add a dependency on the complete toolchain to every object
def ArmEmitter(target, source, env):
	for s in source:
		env.Depends(s, 'arm-toolchain')
	return (target, source)
if not GetOption('clean'):
	# Doing this all the time causes the toolchain to be cleaned whenever a target built with it is cleaned.
	#
	# We are subverting scons' automatic cleaning: build the toolchain when building targets that need it,
	# but only clean it if explicitly instructed to do so on the command line.
	arm.AppendUnique(PROGEMITTER=ArmEmitter)
	arm.AppendUnique(LIBEMITTER=ArmEmitter)

Export('arm')
